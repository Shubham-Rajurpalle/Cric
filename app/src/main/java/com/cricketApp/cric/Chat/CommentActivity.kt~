package com.cricketApp.cric.Chat

import android.os.Bundle
import android.view.WindowManager
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.LinearLayoutManager
import com.cricketApp.cric.databinding.ActivityCommentBinding
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.database.ValueEventListener

class CommentActivity : AppCompatActivity() {

    private lateinit var binding: ActivityCommentBinding
    private lateinit var adapter: CommentAdapter
    private lateinit var comments: ArrayList<CommentMessage>
    private lateinit var database: FirebaseDatabase
    private var messageId: String = ""
    private var messageType: String = ""
    private var originalMessage: Any? = null

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityCommentBinding.inflate(layoutInflater)
        setContentView(binding.root)

        // Fix keyboard issues - keep the layout adjusted
        window.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE)

        // Get message details from intent
        messageId = intent.getStringExtra("MESSAGE_ID") ?: ""
        messageType = intent.getStringExtra("MESSAGE_TYPE") ?: ""

        if (messageId.isEmpty() || messageType.isEmpty()) {
            Toast.makeText(this, "Invalid message information", Toast.LENGTH_SHORT).show()
            finish()
            return
        }

        // Initialize Firebase
        database = FirebaseDatabase.getInstance()

        // Load original message
        loadOriginalMessage()

        // Setup RecyclerView
        comments = ArrayList()
        adapter = CommentAdapter(comments, messageId, messageType)
        binding.recyclerViewComments.apply {
            layoutManager = LinearLayoutManager(this@CommentActivity)
            adapter = this@CommentActivity.adapter
        }

        // Setup send button
        binding.buttonSendComment.setOnClickListener {
            sendComment()
        }

        // Setup back button
        binding.buttonBack.setOnClickListener {
            finish()
        }
    }

    private fun loadOriginalMessage() {
        val path = if (messageType == "chat") {
            "NoBallZone/chats/$messageId"
        } else {
            "NoBallZone/polls/$messageId"
        }

        val messageRef = database.getReference(path)
        messageRef.addListenerForSingleValueEvent(object : ValueEventListener {
            override fun onDataChange(snapshot: DataSnapshot) {
                originalMessage = if (messageType == "chat") {
                    snapshot.getValue(ChatMessage::class.java)
                } else {
                    snapshot.getValue(PollMessage::class.java)
                }

                // Set title based on original message
                when (originalMessage) {
                    is ChatMessage -> {
                        val chat = originalMessage as ChatMessage
                        binding.textViewOriginalMessage.text = chat.message
                        binding.textViewOriginalSender.text = "${chat.senderName} (${chat.team})"
                    }
                    is PollMessage -> {
                        val poll = originalMessage as PollMessage
                        binding.textViewOriginalMessage.text = poll.question
                        binding.textViewOriginalSender.text = "${poll.senderName} (${poll.team})"
                    }
                }

                // Now load comments
                loadComments()
            }

            override fun onCancelled(error: DatabaseError) {
                Toast.makeText(this@CommentActivity, "Failed to load message", Toast.LENGTH_SHORT).show()
                finish()
            }
        })
    }

    private fun loadComments() {
        val path = if (messageType == "chat") {
            "NoBallZone/chats/$messageId/comments"
        } else {
            "NoBallZone/polls/$messageId/comments"
        }

        val commentsRef = database.getReference(path)

        commentsRef.addValueEventListener(object : ValueEventListener {
            override fun onDataChange(snapshot: DataSnapshot) {
                comments.clear()

                for (commentSnapshot in snapshot.children) {
                    val comment = commentSnapshot.getValue(CommentMessage::class.java)
                    comment?.let {
                        it.id = commentSnapshot.key ?: ""
                        comments.add(it)
                    }
                }

                // Sort comments by timestamp
                comments.sortBy { it.timestamp }

                adapter.notifyDataSetChanged()

                // Scroll to bottom
                if (comments.isNotEmpty()) {
                    binding.recyclerViewComments.scrollToPosition(comments.size - 1)
                }
            }

            override fun onCancelled(error: DatabaseError) {
                Toast.makeText(this@CommentActivity, "Failed to load comments", Toast.LENGTH_SHORT).show()
            }
        })
    }

    private fun sendComment() {
        val commentText = binding.editTextComment.text.toString().trim()
        if (commentText.isEmpty()) return

        val currentUser = FirebaseAuth.getInstance().currentUser ?: return

        val path = if (messageType == "chat") {
            "NoBallZone/chats/$messageId/comments"
        } else {
            "NoBallZone/polls/$messageId/comments"
        }

        // Get user profile information
        val userRef = database.getReference("NoBallZone/users/${currentUser.uid}")
        userRef.addListenerForSingleValueEvent(object : ValueEventListener {
            override fun onDataChange(snapshot: DataSnapshot) {
                val userName = snapshot.child("displayName").getValue(String::class.java)
                    ?: currentUser.displayName ?: "Anonymous"

                val commentRef = database.getReference(path).push()
                val commentId = commentRef.key ?: return

                val comment = CommentMessage(
                    id = commentId,
                    senderId = currentUser.uid,
                    senderName = userName,
                    message = commentText,
                    timestamp = System.currentTimeMillis()
                )

                commentRef.setValue(comment)
                    .addOnSuccessListener {
                        binding.editTextComment.text.clear()
                    }
                    .addOnFailureListener {
                        Toast.makeText(this@CommentActivity, "Failed to send comment", Toast.LENGTH_SHORT).show()
                    }
            }

            override fun onCancelled(error: DatabaseError) {
                // Fallback to basic user info
                val commentRef = database.getReference(path).push()
                val commentId = commentRef.key ?: return

                val comment = CommentMessage(
                    id = commentId,
                    senderId = currentUser.uid,
                    senderName = currentUser.displayName ?: "Anonymous",
                    message = commentText,
                    timestamp = System.currentTimeMillis()
                )

                commentRef.setValue(comment)
                    .addOnSuccessListener {
                        binding.editTextComment.text.clear()
                    }
                    .addOnFailureListener {
                        Toast.makeText(this@CommentActivity, "Failed to send comment", Toast.LENGTH_SHORT).show()
                    }
            }
        })
    }
}