package com.cricketApp.cric.Chat

import android.app.AlertDialog
import android.os.Bundle
import android.util.Log
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.EditText
import android.widget.LinearLayout
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import androidx.recyclerview.widget.LinearLayoutManager
import com.bumptech.glide.Glide
import com.cricketApp.cric.Leaderboard.LeaderboardFragment
import com.cricketApp.cric.Profile.ProfileFragment
import com.cricketApp.cric.R
import com.cricketApp.cric.databinding.FragmentChatBinding
import com.google.android.material.bottomnavigation.BottomNavigationView
import com.google.android.material.chip.Chip
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.database.ChildEventListener
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.database.ValueEventListener

class ChatFragment : Fragment() {

    private lateinit var binding: FragmentChatBinding
    private lateinit var adapter: ChatAdapter
    private lateinit var messages: ArrayList<Any> // Can hold both ChatMessage and PollMessage
    private lateinit var database: FirebaseDatabase
    private val currentUser = FirebaseAuth.getInstance().currentUser
    private var userTeam: String = "CSK" // Default team, will be updated from user profile

    // Map to keep track of message positions for efficient updates
    private val messagePositions = mutableMapOf<String, Int>()

    // Selected filters
    private var selectedFilter = mutableSetOf<String>()

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = FragmentChatBinding.inflate(inflater, container, false)
        ViewCompat.setOnApplyWindowInsetsListener(binding.root) { view, insets ->
            val imeVisible = insets.isVisible(WindowInsetsCompat.Type.ime()) // Check if IME is visible
            val height = requireActivity().findViewById<BottomNavigationView>(R.id.bottomNavigation).height
            val bottomInsets = if (imeVisible) {
                insets.getInsets(WindowInsetsCompat.Type.ime()).bottom - height // Use IME insets when keyboard is visible
            } else {
                insets.getInsets(WindowInsetsCompat.Type.systemBars()).bottom // Use system bar insets otherwise
            }

            view.setPadding(0, 0, 0, bottomInsets)

            insets
        }
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // Initialize Firebase
        database = FirebaseDatabase.getInstance()

        // Load profile photo
        loadProfilePhoto()

        // Fetch user's team
        fetchUserTeam()

        // Setup RecyclerView
        messages = ArrayList()
        adapter = ChatAdapter(messages)
        binding.recyclerViewMessages.apply {
            layoutManager = LinearLayoutManager(context, LinearLayoutManager.VERTICAL, true)
            (layoutManager as LinearLayoutManager).stackFromEnd = true
            adapter = this@ChatFragment.adapter
        }

        // Setup filters
        setupFilters()

        // Setup Firebase listeners
        setupFirebaseListeners()

        // Setup send message button
        binding.buttonSend.setOnClickListener {
            sendMessage()
        }

        // Setup poll button
        binding.buttonPoll.setOnClickListener {
            showCreatePollDialog()
        }

        // Setup navigation buttons
        binding.leaderBoardIcon.setOnClickListener {
            val bottomNavigation: BottomNavigationView = requireActivity().findViewById(R.id.bottomNavigation)
            bottomNavigation.selectedItemId = R.id.leaderboardIcon
            val fragmentManager = parentFragmentManager
            val transaction = fragmentManager.beginTransaction()
            transaction.replace(R.id.navHost, LeaderboardFragment())
            transaction.addToBackStack(null)
            transaction.commit()
        }

        binding.profilePhoto.setOnClickListener {
            val bottomNavigation: BottomNavigationView = requireActivity().findViewById(R.id.bottomNavigation)
            bottomNavigation.selectedItemId = R.id.profileIcon
            val fragmentManager = parentFragmentManager
            val transaction = fragmentManager.beginTransaction()
            transaction.replace(R.id.navHost, ProfileFragment())
            transaction.addToBackStack(null)
            transaction.commit()
        }
    }

    private fun loadProfilePhoto() {
        val userId = currentUser?.uid ?: return
        val userRef = database.getReference("Users/$userId/profilePhoto")
        userRef.addListenerForSingleValueEvent(object : ValueEventListener {
            override fun onDataChange(snapshot: DataSnapshot) {
                val photoUrl = snapshot.getValue(String::class.java)
                if (!photoUrl.isNullOrEmpty()) {
                    Glide.with(context ?: return)
                        .load(photoUrl)
                        .placeholder(R.drawable.profile_icon)
                        .into(binding.profilePhoto)
                } else {
                    Log.e("Profile", "No profile photo found")
                }
            }

            override fun onCancelled(error: DatabaseError) {
                Log.e("ChatFragment", "Error loading profile photo", error.toException())
            }
        })
    }

    private fun fetchUserTeam() {
        currentUser?.uid?.let { userId ->
            val userRef = database.getReference("Users/$userId/iplTeam")
            userRef.addListenerForSingleValueEvent(object : ValueEventListener {
                override fun onDataChange(snapshot: DataSnapshot) {
                    userTeam = snapshot.getValue(String::class.java) ?: "No Team"
                }

                override fun onCancelled(error: DatabaseError) {
                    // Keep default team
                }
            })
        }
    }

    private fun setupFilters() {
        binding.chipAll.setOnClickListener { resetFilters() }
        binding.chipTopHits.setOnClickListener { toggleFilter("TopHits") { loadTopHitMessages() } }
        binding.chipTopMiss.setOnClickListener { toggleFilter("TopMiss") { loadTopMissMessages() } }
        binding.chipPolls.setOnClickListener { toggleFilter("Polls") { loadPollsOnly() } }
        binding.chipCSK.setOnClickListener { toggleFilter("CSK") { loadTeamMessages("CSK") } }
        binding.chipMI.setOnClickListener { toggleFilter("MI") { loadTeamMessages("MI") } }
        binding.chipDC.setOnClickListener { toggleFilter("DC") { loadTeamMessages("DC") } }
        binding.chipGT.setOnClickListener { toggleFilter("GT") { loadTeamMessages("GT") } }
        binding.chipKKR.setOnClickListener { toggleFilter("KKR") { loadTeamMessages("KKR") } }
        binding.chipLSG.setOnClickListener { toggleFilter("LSG") { loadTeamMessages("LSG") } }
        binding.chipRCB.setOnClickListener { toggleFilter("RCB") { loadTeamMessages("RCB") } }
        binding.chipPBKS.setOnClickListener { toggleFilter("PBKS") { loadTeamMessages("PBKS") } }
        binding.chipRR.setOnClickListener { toggleFilter("RR") { loadTeamMessages("RR") } }
        binding.chipSRH.setOnClickListener { toggleFilter("SRH") { loadTeamMessages("SRH") } }

        binding.chipAll.isChecked = true
    }

    private fun toggleFilter(filter: String, action: () -> Unit) {
        val chip = when (filter) {
            "TopHits" -> binding.chipTopHits
            "TopMiss" -> binding.chipTopMiss
            "Polls" -> binding.chipPolls
            "CSK" -> binding.chipCSK
            "MI" -> binding.chipMI
            "DC" -> binding.chipDC
            "GT" -> binding.chipGT
            "KKR" -> binding.chipKKR
            "LSG" -> binding.chipLSG
            "RCB" -> binding.chipRCB
            "PBKS" -> binding.chipPBKS
            "RR" -> binding.chipRR
            "SRH" -> binding.chipSRH
            else -> null
        }

        val isSelected = selectedFilter.contains(filter)

        if (isSelected) {
            selectedFilter.remove(filter)
            chip?.isChecked = false
            chip?.isSelected = false
            chip?.chipStrokeWidth = 2f
        } else {
            selectedFilter.add(filter)
            chip?.isChecked = true
            chip?.isSelected = true
            chip?.chipStrokeWidth = 1f
        }

        applyFilters()
    }

    private fun applyFilters() {
        if (selectedFilter.isEmpty()) {
            loadMessages()
            return
        }

        // Clear the current list
        messages.clear()
        adapter.notifyDataSetChanged()

        if (selectedFilter.contains("TopHits")) { loadTopHitMessages() }
        if (selectedFilter.contains("TopMiss")) { loadTopMissMessages() }
        if (selectedFilter.contains("Polls")) { loadPollsOnly() }

        val selectedTeams = selectedFilter.filter { it !in listOf("TopHits", "TopMiss", "Polls") }
        if (selectedTeams.isNotEmpty()) {
            selectedTeams.forEach { team -> loadTeamMessages(team) }
        }
    }

    private fun resetFilters() {
        selectedFilter.clear()

        binding.chipAll.isChecked = true

        val allChips = listOf(
            binding.chipTopHits, binding.chipTopMiss, binding.chipPolls,
            binding.chipCSK, binding.chipMI, binding.chipDC, binding.chipGT,
            binding.chipKKR, binding.chipLSG, binding.chipRCB, binding.chipPBKS,
            binding.chipRR, binding.chipSRH
        )

        allChips.forEach { chip ->
            chip.isChecked = false
            chip.isSelected = false
            chip.chipStrokeWidth = 2f
        }

        loadMessages()
    }

    private fun setupFirebaseListeners() {
        // We'll use different listeners based on filter status
        loadMessages()
    }

    private fun loadMessages() {
        val chatsRef = database.getReference("NoBallZone/chats")
        val pollsRef = database.getReference("NoBallZone/polls")

        // Clear existing data
        messages.clear()
        messagePositions.clear()

        // Setup child event listeners for real-time updates
        setupChatListener(chatsRef)
        setupPollListener(pollsRef)

        // Initial load
        loadInitialMessages()
    }

    // Use these updated methods in your ChatFragment to fix the Firebase List vs HashMap issue

// Replace the existing methods with these implementations:

    // Use these updated methods in your ChatFragment to fix the Firebase List vs HashMap issue

// Replace the existing methods with these implementations:

    private fun setupChatListener(chatsRef: com.google.firebase.database.DatabaseReference) {
        chatsRef.addChildEventListener(object : ChildEventListener {
            override fun onChildAdded(snapshot: DataSnapshot, previousChildName: String?) {
                // Skip if already in our list (from initial load)
                val chatId = snapshot.key ?: return
                if (messagePositions.containsKey(chatId)) return

                // Use helper method to properly read the chat with comments
                val chat = FirebaseDataHelper.getChatMessageFromSnapshot(snapshot) ?: return

                // Add to the list (at the beginning for newest first)
                messages.add(0, chat)

                // Update positions map
                updatePositionsMap()

                adapter.notifyItemInserted(0)
                binding.recyclerViewMessages.scrollToPosition(0)
            }

            override fun onChildChanged(snapshot: DataSnapshot, previousChildName: String?) {
                val chatId = snapshot.key ?: return
                val position = messagePositions[chatId] ?: return

                // Use helper method to properly read the updated chat with comments
                val updatedChat = FirebaseDataHelper.getChatMessageFromSnapshot(snapshot) ?: return

                val currentChat = messages[position] as? ChatMessage ?: return

                // Check what changed and update accordingly
                var needsFullUpdate = false

                // Only update reactions if they changed
                if (currentChat.reactions != updatedChat.reactions) {
                    currentChat.reactions = updatedChat.reactions
                    adapter.notifyItemChanged(position, "reaction")
                }

                // Only update hit/miss if they changed
                if (currentChat.hit != updatedChat.hit || currentChat.miss != updatedChat.miss) {
                    currentChat.hit = updatedChat.hit
                    currentChat.miss = updatedChat.miss
                    adapter.notifyItemChanged(position, "hit_miss")
                }

                // Only update comments if they changed - using list size as proxy for change
                if (currentChat.comments.size != updatedChat.comments.size) {
                    currentChat.comments = updatedChat.comments
                    adapter.notifyItemChanged(position, "comments")
                }

                // Handle other changes with a full update if needed
                if (needsFullUpdate) {
                    messages[position] = updatedChat
                    adapter.notifyItemChanged(position)
                }
            }

            // Other methods remain the same
            override fun onChildRemoved(snapshot: DataSnapshot) {
                val chatId = snapshot.key ?: return
                val position = messagePositions[chatId] ?: return

                messages.removeAt(position)
                messagePositions.remove(chatId)

                // Update positions map
                updatePositionsMap()

                adapter.notifyItemRemoved(position)
            }

            override fun onChildMoved(snapshot: DataSnapshot, previousChildName: String?) {
                // Not handling moves for this implementation
            }

            override fun onCancelled(error: DatabaseError) {
                // Handle error
                Log.e("ChatFragment", "Error with chat listener", error.toException())
            }
        })
    }

    private fun setupPollListener(pollsRef: com.google.firebase.database.DatabaseReference) {
        pollsRef.addChildEventListener(object : ChildEventListener {
            override fun onChildAdded(snapshot: DataSnapshot, previousChildName: String?) {
                val pollId = snapshot.key ?: return
                if (messagePositions.containsKey(pollId)) return

                // Use helper method to properly read the poll with comments
                val poll = FirebaseDataHelper.getPollMessageFromSnapshot(snapshot) ?: return

                // Add to the list (at the beginning for newest first)
                messages.add(0, poll)

                // Update positions map
                updatePositionsMap()

                adapter.notifyItemInserted(0)
                binding.recyclerViewMessages.scrollToPosition(0)
            }

            override fun onChildChanged(snapshot: DataSnapshot, previousChildName: String?) {
                val pollId = snapshot.key ?: return
                val position = messagePositions[pollId] ?: return

                // Use helper method to properly read the updated poll with comments
                val updatedPoll = FirebaseDataHelper.getPollMessageFromSnapshot(snapshot) ?: return

                val currentPoll = messages[position] as? PollMessage ?: return

                // Check what changed and update accordingly
                var optionsChanged = false

                // Only update reactions if they changed
                if (currentPoll.reactions != updatedPoll.reactions) {
                    currentPoll.reactions = updatedPoll.reactions
                    adapter.notifyItemChanged(position, "reaction")
                }

                // Only update hit/miss if they changed
                if (currentPoll.hit != updatedPoll.hit || currentPoll.miss != updatedPoll.miss) {
                    currentPoll.hit = updatedPoll.hit
                    currentPoll.miss = updatedPoll.miss
                    adapter.notifyItemChanged(position, "hit_miss")
                }

                // Only update comments if they changed - using list size as proxy for change
                if (currentPoll.comments.size != updatedPoll.comments.size) {
                    currentPoll.comments = updatedPoll.comments
                    adapter.notifyItemChanged(position, "comments")
                }

                // Poll options require a full update if changed
                if (currentPoll.options != updatedPoll.options) {
                    optionsChanged = true
                }

                // Do a full update if poll options changed
                if (optionsChanged) {
                    messages[position] = updatedPoll
                    adapter.notifyItemChanged(position)
                }
            }

            // Other methods remain the same
            override fun onChildRemoved(snapshot: DataSnapshot) {
                val pollId = snapshot.key ?: return
                val position = messagePositions[pollId] ?: return

                messages.removeAt(position)
                messagePositions.remove(pollId)

                // Update positions map
                updatePositionsMap()

                adapter.notifyItemRemoved(position)
            }

            override fun onChildMoved(snapshot: DataSnapshot, previousChildName: String?) {
                // Not handling moves for this implementation
            }

            override fun onCancelled(error: DatabaseError) {
                // Handle error
                Log.e("ChatFragment", "Error with poll listener", error.toException())
            }
        })
    }

    private fun loadInitialMessages() {
        val chatsRef = database.getReference("NoBallZone/chats")
        val pollsRef = database.getReference("NoBallZone/polls")

        // Clear existing data
        messages.clear()
        messagePositions.clear()

        // Load chats first
        chatsRef.addListenerForSingleValueEvent(object : ValueEventListener {
            override fun onDataChange(snapshot: DataSnapshot) {
                val tempMessages = ArrayList<Any>()

                for (chatSnapshot in snapshot.children) {
                    // Use helper method to properly read the chat with comments
                    val chat = FirebaseDataHelper.getChatMessageFromSnapshot(chatSnapshot)
                    chat?.let {
                        tempMessages.add(it)
                    }
                }

                // Now load poll messages
                pollsRef.addListenerForSingleValueEvent(object : ValueEventListener {
                    override fun onDataChange(snapshot: DataSnapshot) {
                        for (pollSnapshot in snapshot.children) {
                            // Use helper method to properly read the poll with comments
                            val poll = FirebaseDataHelper.getPollMessageFromSnapshot(pollSnapshot)
                            poll?.let {
                                tempMessages.add(it)
                            }
                        }

                        // Sort all messages by timestamp (descending)
                        tempMessages.sortByDescending {
                            when (it) {
                                is ChatMessage -> it.timestamp
                                is PollMessage -> it.timestamp
                                else -> 0L
                            }
                        }

                        // Add to main list
                        messages.addAll(tempMessages)

                        // Update positions map
                        updatePositionsMap()

                        adapter.notifyDataSetChanged()

                        // Scroll to top after loading
                        if (messages.isNotEmpty()) {
                            binding.recyclerViewMessages.scrollToPosition(0)
                        }
                    }

                    override fun onCancelled(error: DatabaseError) {
                        // Handle error
                        Log.e("ChatFragment", "Error loading polls", error.toException())
                    }
                })
            }

            override fun onCancelled(error: DatabaseError) {
                // Handle error
                Log.e("ChatFragment", "Error loading chats", error.toException())
            }
        })
    }
    
    private fun updatePositionsMap() {
        // Update the positions map to reflect current positions in the list
        messagePositions.clear()
        messages.forEachIndexed { index, message ->
            when (message) {
                is ChatMessage -> messagePositions[message.id] = index
                is PollMessage -> messagePositions[message.id] = index
            }
        }
    }

    private fun loadTopHitMessages() {
        val chatsRef = database.getReference("NoBallZone/chats")

        // Load chat messages with high hits (only messages with hits > 0)
        chatsRef.orderByChild("hit").startAt(1.0).addValueEventListener(object : ValueEventListener {
            override fun onDataChange(snapshot: DataSnapshot) {
                val tempMessages = ArrayList<Any>()

                for (chatSnapshot in snapshot.children) {
                    val chat = chatSnapshot.getValue(ChatMessage::class.java)
                    chat?.let {
                        it.id = chatSnapshot.key ?: ""
                        tempMessages.add(it)
                    }
                }

                // Add to main list
                messages.clear()
                messages.addAll(tempMessages)

                // Load poll messages with high hits
                loadTopHitPolls()
            }

            override fun onCancelled(error: DatabaseError) {
                // Handle error
                Log.e("ChatFragment", "Error loading top hit messages", error.toException())
            }
        })
    }

    private fun loadTopHitPolls() {
        val pollsRef = database.getReference("NoBallZone/polls")

        pollsRef.orderByChild("hit").startAt(1.0).addValueEventListener(object : ValueEventListener {
            override fun onDataChange(snapshot: DataSnapshot) {
                val tempPolls = ArrayList<Any>()

                for (pollSnapshot in snapshot.children) {
                    val poll = pollSnapshot.getValue(PollMessage::class.java)
                    poll?.let {
                        it.id = pollSnapshot.key ?: ""
                        tempPolls.add(it)
                    }
                }

                // Add to main list
                messages.addAll(tempPolls)

                // Sort all messages by hit count (descending) and then by timestamp
                messages.sortWith(compareByDescending<Any> {
                    when (it) {
                        is ChatMessage -> it.hit
                        is PollMessage -> it.hit
                        else -> 0
                    }
                }.thenByDescending {
                    when (it) {
                        is ChatMessage -> it.timestamp
                        is PollMessage -> it.timestamp
                        else -> 0L
                    }
                })

                // Update positions map
                updatePositionsMap()

                adapter.notifyDataSetChanged()

                if (messages.isNotEmpty()) {
                    binding.recyclerViewMessages.scrollToPosition(0)
                }
            }

            override fun onCancelled(error: DatabaseError) {
                // Handle error
                Log.e("ChatFragment", "Error loading top hit polls", error.toException())
            }
        })
    }

    private fun loadTopMissMessages() {
        val chatsRef = database.getReference("NoBallZone/chats")

        // Load chat messages with high misses (only messages with misses > 0)
        chatsRef.orderByChild("miss").startAt(1.0).addValueEventListener(object : ValueEventListener {
            override fun onDataChange(snapshot: DataSnapshot) {
                val tempMessages = ArrayList<Any>()

                for (chatSnapshot in snapshot.children) {
                    val chat = chatSnapshot.getValue(ChatMessage::class.java)
                    chat?.let {
                        it.id = chatSnapshot.key ?: ""
                        tempMessages.add(it)
                    }
                }

                // Add to main list
                messages.clear()
                messages.addAll(tempMessages)

                // Load poll messages with high misses
                loadTopMissPolls()
            }

            override fun onCancelled(error: DatabaseError) {
                // Handle error
                Log.e("ChatFragment", "Error loading top miss messages", error.toException())
            }
        })
    }

    private fun loadTopMissPolls() {
        val pollsRef = database.getReference("NoBallZone/polls")

        pollsRef.orderByChild("miss").startAt(1.0).addValueEventListener(object : ValueEventListener {
            override fun onDataChange(snapshot: DataSnapshot) {
                val tempPolls = ArrayList<Any>()

                for (pollSnapshot in snapshot.children) {
                    val poll = pollSnapshot.getValue(PollMessage::class.java)
                    poll?.let {
                        it.id = pollSnapshot.key ?: ""
                        tempPolls.add(it)
                    }
                }

                // Add to main list
                messages.addAll(tempPolls)

                // Sort all messages by miss count (descending) and then by timestamp
                messages.sortWith(compareByDescending<Any> {
                    when (it) {
                        is ChatMessage -> it.miss
                        is PollMessage -> it.miss
                        else -> 0
                    }
                }.thenByDescending {
                    when (it) {
                        is ChatMessage -> it.timestamp
                        is PollMessage -> it.timestamp
                        else -> 0L
                    }
                })

                // Update positions map
                updatePositionsMap()

                adapter.notifyDataSetChanged()

                if (messages.isNotEmpty()) {
                    binding.recyclerViewMessages.scrollToPosition(0)
                }
            }

            override fun onCancelled(error: DatabaseError) {
                // Handle error
                Log.e("ChatFragment", "Error loading top miss polls", error.toException())
            }
        })
    }

    private fun loadPollsOnly() {
        val pollsRef = database.getReference("NoBallZone/polls")

        messages.clear()

        pollsRef.addValueEventListener(object : ValueEventListener {
            override fun onDataChange(snapshot: DataSnapshot) {
                messages.clear()

                for (pollSnapshot in snapshot.children) {
                    val poll = pollSnapshot.getValue(PollMessage::class.java)
                    poll?.let {
                        it.id = pollSnapshot.key ?: ""
                        messages.add(it)
                    }
                }

                // Sort polls by timestamp
                messages.sortByDescending {
                    when (it) {
                        is PollMessage -> it.timestamp
                        else -> 0L
                    }
                }

                // Update positions map
                updatePositionsMap()

                adapter.notifyDataSetChanged()

                // Scroll to top after loading
                if (messages.isNotEmpty()) {
                    binding.recyclerViewMessages.scrollToPosition(0)
                }
            }

            override fun onCancelled(error: DatabaseError) {
                // Handle error
                Log.e("ChatFragment", "Error loading polls only", error.toException())
            }
        })
    }

    private fun loadTeamMessages(team: String) {
        val chatsRef = database.getReference("NoBallZone/chats")

        // Load team chat messages
        chatsRef.orderByChild("team").equalTo(team).addValueEventListener(object : ValueEventListener {
            override fun onDataChange(snapshot: DataSnapshot) {
                val tempMessages = ArrayList<Any>()

                for (chatSnapshot in snapshot.children) {
                    val chat = chatSnapshot.getValue(ChatMessage::class.java)
                    chat?.let {
                        it.id = chatSnapshot.key ?: ""
                        tempMessages.add(it)
                    }
                }

                // Add to main list
                messages.clear()
                messages.addAll(tempMessages)

                // Load team poll messages
                loadTeamPolls(team)
            }

            override fun onCancelled(error: DatabaseError) {
                // Handle error
                Log.e("ChatFragment", "Error loading team messages", error.toException())
            }
        })
    }

    private fun loadTeamPolls(team: String) {
        val pollsRef = database.getReference("NoBallZone/polls")

        pollsRef.orderByChild("team").equalTo(team).addValueEventListener(object : ValueEventListener {
            override fun onDataChange(snapshot: DataSnapshot) {
                val tempPolls = ArrayList<Any>()

                for (pollSnapshot in snapshot.children) {
                    val poll = pollSnapshot.getValue(PollMessage::class.java)
                    poll?.let {
                        it.id = pollSnapshot.key ?: ""
                        tempPolls.add(it)
                    }
                }

                // Add to main list
                messages.addAll(tempPolls)

                // Sort all messages by timestamp
                messages.sortByDescending {
                    when (it) {
                        is ChatMessage -> it.timestamp
                        is PollMessage -> it.timestamp
                        else -> 0L
                    }
                }

                // Update positions map
                updatePositionsMap()

                adapter.notifyDataSetChanged()

                // Scroll to top after loading
                if (messages.isNotEmpty()) {
                    binding.recyclerViewMessages.scrollToPosition(0)
                }
            }

            override fun onCancelled(error: DatabaseError) {
                // Handle error
                Log.e("ChatFragment", "Error loading team polls", error.toException())
            }
        })
    }

    private fun sendMessage() {
        val messageText = binding.editTextMessage.text.toString().trim()
        if (messageText.isEmpty()) return

        if (currentUser == null) {
            // Handle not logged in
            return
        }

        val chatRef = database.getReference("NoBallZone/chats").push()
        val chatId = chatRef.key ?: return

        // Get user's display name and profile picture
        val userRef = database.getReference("Users/${currentUser.uid}")
        userRef.addListenerForSingleValueEvent(object : ValueEventListener {
            override fun onDataChange(snapshot: DataSnapshot) {
                val userName = snapshot.child("username").getValue(String::class.java) ?: currentUser.displayName ?: "Anonymous"

                val chatMessage = ChatMessage(
                    id = chatId,
                    senderId = currentUser.uid,
                    senderName = userName,
                    team = userTeam,
                    message = messageText,
                    timestamp = System.currentTimeMillis()
                )

                chatRef.setValue(chatMessage)
                    .addOnSuccessListener {
                        binding.editTextMessage.text.clear()
                    }
                    .addOnFailureListener {
                        // Handle error
                        Log.e("ChatFragment", "Error sending message", it)
                    }
            }

            override fun onCancelled(error: DatabaseError) {
                TODO("Not yet implemented")
            }
        })
    }

    private fun showCreatePollDialog() {
        if (currentUser == null) {
            // Handle not logged in
            return
        }

        val dialogView = LayoutInflater.from(context).inflate(R.layout.poll_create_dialog, null)
        val editTextQuestion = dialogView.findViewById<EditText>(R.id.editTextPollQuestion)
        val layoutOptions = dialogView.findViewById<LinearLayout>(R.id.layoutAdditionalOptions)
        val buttonAddOption = dialogView.findViewById<Button>(R.id.buttonAddOption)

        // Set up the initial two options
        val optionLayouts = ArrayList<View>()
        val addOption = {
            val optionView = LayoutInflater.from(context).inflate(R.layout.item_poll_option, null)
            layoutOptions.addView(optionView)
            optionLayouts.add(optionView)
        }

        // Add initial two options
        addOption()
        addOption()

        // Add option button
        buttonAddOption.setOnClickListener {
            if (optionLayouts.size < 5) { // Limit to 6 options
                addOption()
            }
        }

        // Create and show dialog
        val dialog = AlertDialog.Builder(requireContext())
            .setTitle("Create Poll")
            .setView(dialogView)
            .setPositiveButton("Create") { _, _ ->
                createPoll(editTextQuestion.text.toString(), optionLayouts)
            }
            .setNegativeButton("Cancel", null)
            .create()

        dialog.show()
    }

    private fun createPoll(question: String, optionViews: List<View>) {
        if (question.trim().isEmpty() || currentUser == null) return

        val options = mutableMapOf<String, Int>()

        // Collect options
        for (optionView in optionViews) {
            val editTextOption = optionView.findViewById<EditText>(R.id.editTextOption1)
            val optionText = editTextOption.text.toString().trim()

            if (optionText.isNotEmpty()) {
                options[optionText] = 0
            }
        }

        // Need at least two options
        if (options.size < 2) return

        val pollRef = database.getReference("NoBallZone/polls").push()
        val pollId = pollRef.key ?: return

        // Get user's display name and team
        val userRef = database.getReference("Users/${currentUser.uid}")
        userRef.addListenerForSingleValueEvent(object : ValueEventListener {
            override fun onDataChange(snapshot: DataSnapshot) {
                val userName = snapshot.child("username").getValue(String::class.java) ?: currentUser.displayName ?: "Anonymous"

                val pollMessage = PollMessage(
                    id = pollId,
                    senderId = currentUser.uid,
                    senderName = userName,
                    team = userTeam,
                    question = question,
                    options = options.toMutableMap(),
                    timestamp = System.currentTimeMillis()
                )

                pollRef.setValue(pollMessage)
                    .addOnFailureListener {
                        // Handle error
                        Log.e("ChatFragment", "Error creating poll", it)
                    }
            }

            override fun onCancelled(error: DatabaseError) {
                // Fallback to default user info
                val pollMessage = PollMessage(
                    id = pollId,
                    senderId = currentUser.uid,
                    senderName = currentUser.displayName ?: "Anonymous",
                    team = userTeam,
                    question = question,
                    options = options.toMutableMap(),
                    timestamp = System.currentTimeMillis()
                )

                pollRef.setValue(pollMessage)
                    .addOnFailureListener {
                        // Handle error
                        Log.e("ChatFragment", "Error creating poll", it)
                    }
            }
        })
    }
}